generator client {
  provider      = "prisma-client"
  output        = "../generated"
  moduleFormat  = "esm"
  binaryTargets = ["native", "debian-openssl-3.0.x"]
}

datasource db {
  provider = "postgres"
  url      = env("DATABASE_URL")
}

model TranscriptSession {
  id               String   @id @default(cuid())
  socketId         String   @unique
  languageCode     String   @default("en-US")
  transcriptInput  String?  // Speech input from microphone  
  transcriptOutput String?  // Text output being spoken/displayed to user
  audioInputUrl    String?  // URL to sales/microphone recording in GCS
  audioOutputUrl   String?  // URL to client/system audio recording in GCS
  status           SessionStatus @default(ACTIVE)
  startedAt        DateTime @default(now())
  endedAt          DateTime?
  updatedAt        DateTime @updatedAt
  
  @@map("transcript_sessions")
}

enum SessionStatus {
  ACTIVE
  ENDED
  ERROR
}

/// Stores created ElevenLabs Conversational AI agents for auditing/ownership
model ConvAIAgent {
  id        String   @id @default(cuid())
  agentId   String   @unique
  userId    String?
  name      String?
  voiceId   String?
  config    Json?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("convai_agents")
}

model User {
  id            String    @id @map("_id")
  name          String
  email         String
  emailVerified Boolean
  image         String?
  createdAt     DateTime
  updatedAt     DateTime
  sessions      Session[]
  accounts      Account[]

  @@unique([email])
  @@map("user")
}

model Session {
  id        String   @id @map("_id")
  expiresAt DateTime
  token     String
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id @map("_id")
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model Verification {
  id         String    @id @map("_id")
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}
