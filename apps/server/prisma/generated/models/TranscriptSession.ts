
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/**
 * This file exports the `TranscriptSession` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model TranscriptSession
 * 
 */
export type TranscriptSessionModel = runtime.Types.Result.DefaultSelection<Prisma.$TranscriptSessionPayload>

export type AggregateTranscriptSession = {
  _count: TranscriptSessionCountAggregateOutputType | null
  _min: TranscriptSessionMinAggregateOutputType | null
  _max: TranscriptSessionMaxAggregateOutputType | null
}

export type TranscriptSessionMinAggregateOutputType = {
  id: string | null
  socketId: string | null
  languageCode: string | null
  transcriptInput: string | null
  transcriptOutput: string | null
  status: $Enums.SessionStatus | null
  startedAt: Date | null
  endedAt: Date | null
  updatedAt: Date | null
}

export type TranscriptSessionMaxAggregateOutputType = {
  id: string | null
  socketId: string | null
  languageCode: string | null
  transcriptInput: string | null
  transcriptOutput: string | null
  status: $Enums.SessionStatus | null
  startedAt: Date | null
  endedAt: Date | null
  updatedAt: Date | null
}

export type TranscriptSessionCountAggregateOutputType = {
  id: number
  socketId: number
  languageCode: number
  transcriptInput: number
  transcriptOutput: number
  status: number
  startedAt: number
  endedAt: number
  updatedAt: number
  _all: number
}


export type TranscriptSessionMinAggregateInputType = {
  id?: true
  socketId?: true
  languageCode?: true
  transcriptInput?: true
  transcriptOutput?: true
  status?: true
  startedAt?: true
  endedAt?: true
  updatedAt?: true
}

export type TranscriptSessionMaxAggregateInputType = {
  id?: true
  socketId?: true
  languageCode?: true
  transcriptInput?: true
  transcriptOutput?: true
  status?: true
  startedAt?: true
  endedAt?: true
  updatedAt?: true
}

export type TranscriptSessionCountAggregateInputType = {
  id?: true
  socketId?: true
  languageCode?: true
  transcriptInput?: true
  transcriptOutput?: true
  status?: true
  startedAt?: true
  endedAt?: true
  updatedAt?: true
  _all?: true
}

export type TranscriptSessionAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which TranscriptSession to aggregate.
   */
  where?: Prisma.TranscriptSessionWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of TranscriptSessions to fetch.
   */
  orderBy?: Prisma.TranscriptSessionOrderByWithRelationInput | Prisma.TranscriptSessionOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.TranscriptSessionWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` TranscriptSessions from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` TranscriptSessions.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned TranscriptSessions
  **/
  _count?: true | TranscriptSessionCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: TranscriptSessionMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: TranscriptSessionMaxAggregateInputType
}

export type GetTranscriptSessionAggregateType<T extends TranscriptSessionAggregateArgs> = {
      [P in keyof T & keyof AggregateTranscriptSession]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateTranscriptSession[P]>
    : Prisma.GetScalarType<T[P], AggregateTranscriptSession[P]>
}




export type TranscriptSessionGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.TranscriptSessionWhereInput
  orderBy?: Prisma.TranscriptSessionOrderByWithAggregationInput | Prisma.TranscriptSessionOrderByWithAggregationInput[]
  by: Prisma.TranscriptSessionScalarFieldEnum[] | Prisma.TranscriptSessionScalarFieldEnum
  having?: Prisma.TranscriptSessionScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: TranscriptSessionCountAggregateInputType | true
  _min?: TranscriptSessionMinAggregateInputType
  _max?: TranscriptSessionMaxAggregateInputType
}

export type TranscriptSessionGroupByOutputType = {
  id: string
  socketId: string
  languageCode: string
  transcriptInput: string | null
  transcriptOutput: string | null
  status: $Enums.SessionStatus
  startedAt: Date
  endedAt: Date | null
  updatedAt: Date
  _count: TranscriptSessionCountAggregateOutputType | null
  _min: TranscriptSessionMinAggregateOutputType | null
  _max: TranscriptSessionMaxAggregateOutputType | null
}

type GetTranscriptSessionGroupByPayload<T extends TranscriptSessionGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<TranscriptSessionGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof TranscriptSessionGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], TranscriptSessionGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], TranscriptSessionGroupByOutputType[P]>
      }
    >
  >



export type TranscriptSessionWhereInput = {
  AND?: Prisma.TranscriptSessionWhereInput | Prisma.TranscriptSessionWhereInput[]
  OR?: Prisma.TranscriptSessionWhereInput[]
  NOT?: Prisma.TranscriptSessionWhereInput | Prisma.TranscriptSessionWhereInput[]
  id?: Prisma.StringFilter<"TranscriptSession"> | string
  socketId?: Prisma.StringFilter<"TranscriptSession"> | string
  languageCode?: Prisma.StringFilter<"TranscriptSession"> | string
  transcriptInput?: Prisma.StringNullableFilter<"TranscriptSession"> | string | null
  transcriptOutput?: Prisma.StringNullableFilter<"TranscriptSession"> | string | null
  status?: Prisma.EnumSessionStatusFilter<"TranscriptSession"> | $Enums.SessionStatus
  startedAt?: Prisma.DateTimeFilter<"TranscriptSession"> | Date | string
  endedAt?: Prisma.DateTimeNullableFilter<"TranscriptSession"> | Date | string | null
  updatedAt?: Prisma.DateTimeFilter<"TranscriptSession"> | Date | string
}

export type TranscriptSessionOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  socketId?: Prisma.SortOrder
  languageCode?: Prisma.SortOrder
  transcriptInput?: Prisma.SortOrderInput | Prisma.SortOrder
  transcriptOutput?: Prisma.SortOrderInput | Prisma.SortOrder
  status?: Prisma.SortOrder
  startedAt?: Prisma.SortOrder
  endedAt?: Prisma.SortOrderInput | Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type TranscriptSessionWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  socketId?: string
  AND?: Prisma.TranscriptSessionWhereInput | Prisma.TranscriptSessionWhereInput[]
  OR?: Prisma.TranscriptSessionWhereInput[]
  NOT?: Prisma.TranscriptSessionWhereInput | Prisma.TranscriptSessionWhereInput[]
  languageCode?: Prisma.StringFilter<"TranscriptSession"> | string
  transcriptInput?: Prisma.StringNullableFilter<"TranscriptSession"> | string | null
  transcriptOutput?: Prisma.StringNullableFilter<"TranscriptSession"> | string | null
  status?: Prisma.EnumSessionStatusFilter<"TranscriptSession"> | $Enums.SessionStatus
  startedAt?: Prisma.DateTimeFilter<"TranscriptSession"> | Date | string
  endedAt?: Prisma.DateTimeNullableFilter<"TranscriptSession"> | Date | string | null
  updatedAt?: Prisma.DateTimeFilter<"TranscriptSession"> | Date | string
}, "id" | "socketId">

export type TranscriptSessionOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  socketId?: Prisma.SortOrder
  languageCode?: Prisma.SortOrder
  transcriptInput?: Prisma.SortOrderInput | Prisma.SortOrder
  transcriptOutput?: Prisma.SortOrderInput | Prisma.SortOrder
  status?: Prisma.SortOrder
  startedAt?: Prisma.SortOrder
  endedAt?: Prisma.SortOrderInput | Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  _count?: Prisma.TranscriptSessionCountOrderByAggregateInput
  _max?: Prisma.TranscriptSessionMaxOrderByAggregateInput
  _min?: Prisma.TranscriptSessionMinOrderByAggregateInput
}

export type TranscriptSessionScalarWhereWithAggregatesInput = {
  AND?: Prisma.TranscriptSessionScalarWhereWithAggregatesInput | Prisma.TranscriptSessionScalarWhereWithAggregatesInput[]
  OR?: Prisma.TranscriptSessionScalarWhereWithAggregatesInput[]
  NOT?: Prisma.TranscriptSessionScalarWhereWithAggregatesInput | Prisma.TranscriptSessionScalarWhereWithAggregatesInput[]
  id?: Prisma.StringWithAggregatesFilter<"TranscriptSession"> | string
  socketId?: Prisma.StringWithAggregatesFilter<"TranscriptSession"> | string
  languageCode?: Prisma.StringWithAggregatesFilter<"TranscriptSession"> | string
  transcriptInput?: Prisma.StringNullableWithAggregatesFilter<"TranscriptSession"> | string | null
  transcriptOutput?: Prisma.StringNullableWithAggregatesFilter<"TranscriptSession"> | string | null
  status?: Prisma.EnumSessionStatusWithAggregatesFilter<"TranscriptSession"> | $Enums.SessionStatus
  startedAt?: Prisma.DateTimeWithAggregatesFilter<"TranscriptSession"> | Date | string
  endedAt?: Prisma.DateTimeNullableWithAggregatesFilter<"TranscriptSession"> | Date | string | null
  updatedAt?: Prisma.DateTimeWithAggregatesFilter<"TranscriptSession"> | Date | string
}

export type TranscriptSessionCreateInput = {
  id?: string
  socketId: string
  languageCode?: string
  transcriptInput?: string | null
  transcriptOutput?: string | null
  status?: $Enums.SessionStatus
  startedAt?: Date | string
  endedAt?: Date | string | null
  updatedAt?: Date | string
}

export type TranscriptSessionUncheckedCreateInput = {
  id?: string
  socketId: string
  languageCode?: string
  transcriptInput?: string | null
  transcriptOutput?: string | null
  status?: $Enums.SessionStatus
  startedAt?: Date | string
  endedAt?: Date | string | null
  updatedAt?: Date | string
}

export type TranscriptSessionUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  socketId?: Prisma.StringFieldUpdateOperationsInput | string
  languageCode?: Prisma.StringFieldUpdateOperationsInput | string
  transcriptInput?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  transcriptOutput?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  status?: Prisma.EnumSessionStatusFieldUpdateOperationsInput | $Enums.SessionStatus
  startedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  endedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type TranscriptSessionUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  socketId?: Prisma.StringFieldUpdateOperationsInput | string
  languageCode?: Prisma.StringFieldUpdateOperationsInput | string
  transcriptInput?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  transcriptOutput?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  status?: Prisma.EnumSessionStatusFieldUpdateOperationsInput | $Enums.SessionStatus
  startedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  endedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type TranscriptSessionCreateManyInput = {
  id?: string
  socketId: string
  languageCode?: string
  transcriptInput?: string | null
  transcriptOutput?: string | null
  status?: $Enums.SessionStatus
  startedAt?: Date | string
  endedAt?: Date | string | null
  updatedAt?: Date | string
}

export type TranscriptSessionUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  socketId?: Prisma.StringFieldUpdateOperationsInput | string
  languageCode?: Prisma.StringFieldUpdateOperationsInput | string
  transcriptInput?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  transcriptOutput?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  status?: Prisma.EnumSessionStatusFieldUpdateOperationsInput | $Enums.SessionStatus
  startedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  endedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type TranscriptSessionUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  socketId?: Prisma.StringFieldUpdateOperationsInput | string
  languageCode?: Prisma.StringFieldUpdateOperationsInput | string
  transcriptInput?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  transcriptOutput?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  status?: Prisma.EnumSessionStatusFieldUpdateOperationsInput | $Enums.SessionStatus
  startedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  endedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type TranscriptSessionCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  socketId?: Prisma.SortOrder
  languageCode?: Prisma.SortOrder
  transcriptInput?: Prisma.SortOrder
  transcriptOutput?: Prisma.SortOrder
  status?: Prisma.SortOrder
  startedAt?: Prisma.SortOrder
  endedAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type TranscriptSessionMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  socketId?: Prisma.SortOrder
  languageCode?: Prisma.SortOrder
  transcriptInput?: Prisma.SortOrder
  transcriptOutput?: Prisma.SortOrder
  status?: Prisma.SortOrder
  startedAt?: Prisma.SortOrder
  endedAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type TranscriptSessionMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  socketId?: Prisma.SortOrder
  languageCode?: Prisma.SortOrder
  transcriptInput?: Prisma.SortOrder
  transcriptOutput?: Prisma.SortOrder
  status?: Prisma.SortOrder
  startedAt?: Prisma.SortOrder
  endedAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type StringFieldUpdateOperationsInput = {
  set?: string
}

export type NullableStringFieldUpdateOperationsInput = {
  set?: string | null
}

export type EnumSessionStatusFieldUpdateOperationsInput = {
  set?: $Enums.SessionStatus
}

export type DateTimeFieldUpdateOperationsInput = {
  set?: Date | string
}

export type NullableDateTimeFieldUpdateOperationsInput = {
  set?: Date | string | null
}



export type TranscriptSessionSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  socketId?: boolean
  languageCode?: boolean
  transcriptInput?: boolean
  transcriptOutput?: boolean
  status?: boolean
  startedAt?: boolean
  endedAt?: boolean
  updatedAt?: boolean
}, ExtArgs["result"]["transcriptSession"]>

export type TranscriptSessionSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  socketId?: boolean
  languageCode?: boolean
  transcriptInput?: boolean
  transcriptOutput?: boolean
  status?: boolean
  startedAt?: boolean
  endedAt?: boolean
  updatedAt?: boolean
}, ExtArgs["result"]["transcriptSession"]>

export type TranscriptSessionSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  socketId?: boolean
  languageCode?: boolean
  transcriptInput?: boolean
  transcriptOutput?: boolean
  status?: boolean
  startedAt?: boolean
  endedAt?: boolean
  updatedAt?: boolean
}, ExtArgs["result"]["transcriptSession"]>

export type TranscriptSessionSelectScalar = {
  id?: boolean
  socketId?: boolean
  languageCode?: boolean
  transcriptInput?: boolean
  transcriptOutput?: boolean
  status?: boolean
  startedAt?: boolean
  endedAt?: boolean
  updatedAt?: boolean
}

export type TranscriptSessionOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "socketId" | "languageCode" | "transcriptInput" | "transcriptOutput" | "status" | "startedAt" | "endedAt" | "updatedAt", ExtArgs["result"]["transcriptSession"]>

export type $TranscriptSessionPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "TranscriptSession"
  objects: {}
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: string
    socketId: string
    languageCode: string
    transcriptInput: string | null
    transcriptOutput: string | null
    status: $Enums.SessionStatus
    startedAt: Date
    endedAt: Date | null
    updatedAt: Date
  }, ExtArgs["result"]["transcriptSession"]>
  composites: {}
}

export type TranscriptSessionGetPayload<S extends boolean | null | undefined | TranscriptSessionDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$TranscriptSessionPayload, S>

export type TranscriptSessionCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<TranscriptSessionFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: TranscriptSessionCountAggregateInputType | true
  }

export interface TranscriptSessionDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['TranscriptSession'], meta: { name: 'TranscriptSession' } }
  /**
   * Find zero or one TranscriptSession that matches the filter.
   * @param {TranscriptSessionFindUniqueArgs} args - Arguments to find a TranscriptSession
   * @example
   * // Get one TranscriptSession
   * const transcriptSession = await prisma.transcriptSession.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends TranscriptSessionFindUniqueArgs>(args: Prisma.SelectSubset<T, TranscriptSessionFindUniqueArgs<ExtArgs>>): Prisma.Prisma__TranscriptSessionClient<runtime.Types.Result.GetResult<Prisma.$TranscriptSessionPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one TranscriptSession that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {TranscriptSessionFindUniqueOrThrowArgs} args - Arguments to find a TranscriptSession
   * @example
   * // Get one TranscriptSession
   * const transcriptSession = await prisma.transcriptSession.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends TranscriptSessionFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, TranscriptSessionFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__TranscriptSessionClient<runtime.Types.Result.GetResult<Prisma.$TranscriptSessionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first TranscriptSession that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TranscriptSessionFindFirstArgs} args - Arguments to find a TranscriptSession
   * @example
   * // Get one TranscriptSession
   * const transcriptSession = await prisma.transcriptSession.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends TranscriptSessionFindFirstArgs>(args?: Prisma.SelectSubset<T, TranscriptSessionFindFirstArgs<ExtArgs>>): Prisma.Prisma__TranscriptSessionClient<runtime.Types.Result.GetResult<Prisma.$TranscriptSessionPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first TranscriptSession that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TranscriptSessionFindFirstOrThrowArgs} args - Arguments to find a TranscriptSession
   * @example
   * // Get one TranscriptSession
   * const transcriptSession = await prisma.transcriptSession.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends TranscriptSessionFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, TranscriptSessionFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__TranscriptSessionClient<runtime.Types.Result.GetResult<Prisma.$TranscriptSessionPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more TranscriptSessions that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TranscriptSessionFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all TranscriptSessions
   * const transcriptSessions = await prisma.transcriptSession.findMany()
   * 
   * // Get first 10 TranscriptSessions
   * const transcriptSessions = await prisma.transcriptSession.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const transcriptSessionWithIdOnly = await prisma.transcriptSession.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends TranscriptSessionFindManyArgs>(args?: Prisma.SelectSubset<T, TranscriptSessionFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$TranscriptSessionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a TranscriptSession.
   * @param {TranscriptSessionCreateArgs} args - Arguments to create a TranscriptSession.
   * @example
   * // Create one TranscriptSession
   * const TranscriptSession = await prisma.transcriptSession.create({
   *   data: {
   *     // ... data to create a TranscriptSession
   *   }
   * })
   * 
   */
  create<T extends TranscriptSessionCreateArgs>(args: Prisma.SelectSubset<T, TranscriptSessionCreateArgs<ExtArgs>>): Prisma.Prisma__TranscriptSessionClient<runtime.Types.Result.GetResult<Prisma.$TranscriptSessionPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many TranscriptSessions.
   * @param {TranscriptSessionCreateManyArgs} args - Arguments to create many TranscriptSessions.
   * @example
   * // Create many TranscriptSessions
   * const transcriptSession = await prisma.transcriptSession.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends TranscriptSessionCreateManyArgs>(args?: Prisma.SelectSubset<T, TranscriptSessionCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many TranscriptSessions and returns the data saved in the database.
   * @param {TranscriptSessionCreateManyAndReturnArgs} args - Arguments to create many TranscriptSessions.
   * @example
   * // Create many TranscriptSessions
   * const transcriptSession = await prisma.transcriptSession.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many TranscriptSessions and only return the `id`
   * const transcriptSessionWithIdOnly = await prisma.transcriptSession.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends TranscriptSessionCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, TranscriptSessionCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$TranscriptSessionPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a TranscriptSession.
   * @param {TranscriptSessionDeleteArgs} args - Arguments to delete one TranscriptSession.
   * @example
   * // Delete one TranscriptSession
   * const TranscriptSession = await prisma.transcriptSession.delete({
   *   where: {
   *     // ... filter to delete one TranscriptSession
   *   }
   * })
   * 
   */
  delete<T extends TranscriptSessionDeleteArgs>(args: Prisma.SelectSubset<T, TranscriptSessionDeleteArgs<ExtArgs>>): Prisma.Prisma__TranscriptSessionClient<runtime.Types.Result.GetResult<Prisma.$TranscriptSessionPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one TranscriptSession.
   * @param {TranscriptSessionUpdateArgs} args - Arguments to update one TranscriptSession.
   * @example
   * // Update one TranscriptSession
   * const transcriptSession = await prisma.transcriptSession.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends TranscriptSessionUpdateArgs>(args: Prisma.SelectSubset<T, TranscriptSessionUpdateArgs<ExtArgs>>): Prisma.Prisma__TranscriptSessionClient<runtime.Types.Result.GetResult<Prisma.$TranscriptSessionPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more TranscriptSessions.
   * @param {TranscriptSessionDeleteManyArgs} args - Arguments to filter TranscriptSessions to delete.
   * @example
   * // Delete a few TranscriptSessions
   * const { count } = await prisma.transcriptSession.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends TranscriptSessionDeleteManyArgs>(args?: Prisma.SelectSubset<T, TranscriptSessionDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more TranscriptSessions.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TranscriptSessionUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many TranscriptSessions
   * const transcriptSession = await prisma.transcriptSession.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends TranscriptSessionUpdateManyArgs>(args: Prisma.SelectSubset<T, TranscriptSessionUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more TranscriptSessions and returns the data updated in the database.
   * @param {TranscriptSessionUpdateManyAndReturnArgs} args - Arguments to update many TranscriptSessions.
   * @example
   * // Update many TranscriptSessions
   * const transcriptSession = await prisma.transcriptSession.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more TranscriptSessions and only return the `id`
   * const transcriptSessionWithIdOnly = await prisma.transcriptSession.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends TranscriptSessionUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, TranscriptSessionUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$TranscriptSessionPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one TranscriptSession.
   * @param {TranscriptSessionUpsertArgs} args - Arguments to update or create a TranscriptSession.
   * @example
   * // Update or create a TranscriptSession
   * const transcriptSession = await prisma.transcriptSession.upsert({
   *   create: {
   *     // ... data to create a TranscriptSession
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the TranscriptSession we want to update
   *   }
   * })
   */
  upsert<T extends TranscriptSessionUpsertArgs>(args: Prisma.SelectSubset<T, TranscriptSessionUpsertArgs<ExtArgs>>): Prisma.Prisma__TranscriptSessionClient<runtime.Types.Result.GetResult<Prisma.$TranscriptSessionPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of TranscriptSessions.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TranscriptSessionCountArgs} args - Arguments to filter TranscriptSessions to count.
   * @example
   * // Count the number of TranscriptSessions
   * const count = await prisma.transcriptSession.count({
   *   where: {
   *     // ... the filter for the TranscriptSessions we want to count
   *   }
   * })
  **/
  count<T extends TranscriptSessionCountArgs>(
    args?: Prisma.Subset<T, TranscriptSessionCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], TranscriptSessionCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a TranscriptSession.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TranscriptSessionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends TranscriptSessionAggregateArgs>(args: Prisma.Subset<T, TranscriptSessionAggregateArgs>): Prisma.PrismaPromise<GetTranscriptSessionAggregateType<T>>

  /**
   * Group by TranscriptSession.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TranscriptSessionGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends TranscriptSessionGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: TranscriptSessionGroupByArgs['orderBy'] }
      : { orderBy?: TranscriptSessionGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, TranscriptSessionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTranscriptSessionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the TranscriptSession model
 */
readonly fields: TranscriptSessionFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for TranscriptSession.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__TranscriptSessionClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the TranscriptSession model
 */
export interface TranscriptSessionFieldRefs {
  readonly id: Prisma.FieldRef<"TranscriptSession", 'String'>
  readonly socketId: Prisma.FieldRef<"TranscriptSession", 'String'>
  readonly languageCode: Prisma.FieldRef<"TranscriptSession", 'String'>
  readonly transcriptInput: Prisma.FieldRef<"TranscriptSession", 'String'>
  readonly transcriptOutput: Prisma.FieldRef<"TranscriptSession", 'String'>
  readonly status: Prisma.FieldRef<"TranscriptSession", 'SessionStatus'>
  readonly startedAt: Prisma.FieldRef<"TranscriptSession", 'DateTime'>
  readonly endedAt: Prisma.FieldRef<"TranscriptSession", 'DateTime'>
  readonly updatedAt: Prisma.FieldRef<"TranscriptSession", 'DateTime'>
}
    

// Custom InputTypes
/**
 * TranscriptSession findUnique
 */
export type TranscriptSessionFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TranscriptSession
   */
  select?: Prisma.TranscriptSessionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the TranscriptSession
   */
  omit?: Prisma.TranscriptSessionOmit<ExtArgs> | null
  /**
   * Filter, which TranscriptSession to fetch.
   */
  where: Prisma.TranscriptSessionWhereUniqueInput
}

/**
 * TranscriptSession findUniqueOrThrow
 */
export type TranscriptSessionFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TranscriptSession
   */
  select?: Prisma.TranscriptSessionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the TranscriptSession
   */
  omit?: Prisma.TranscriptSessionOmit<ExtArgs> | null
  /**
   * Filter, which TranscriptSession to fetch.
   */
  where: Prisma.TranscriptSessionWhereUniqueInput
}

/**
 * TranscriptSession findFirst
 */
export type TranscriptSessionFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TranscriptSession
   */
  select?: Prisma.TranscriptSessionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the TranscriptSession
   */
  omit?: Prisma.TranscriptSessionOmit<ExtArgs> | null
  /**
   * Filter, which TranscriptSession to fetch.
   */
  where?: Prisma.TranscriptSessionWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of TranscriptSessions to fetch.
   */
  orderBy?: Prisma.TranscriptSessionOrderByWithRelationInput | Prisma.TranscriptSessionOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for TranscriptSessions.
   */
  cursor?: Prisma.TranscriptSessionWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` TranscriptSessions from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` TranscriptSessions.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of TranscriptSessions.
   */
  distinct?: Prisma.TranscriptSessionScalarFieldEnum | Prisma.TranscriptSessionScalarFieldEnum[]
}

/**
 * TranscriptSession findFirstOrThrow
 */
export type TranscriptSessionFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TranscriptSession
   */
  select?: Prisma.TranscriptSessionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the TranscriptSession
   */
  omit?: Prisma.TranscriptSessionOmit<ExtArgs> | null
  /**
   * Filter, which TranscriptSession to fetch.
   */
  where?: Prisma.TranscriptSessionWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of TranscriptSessions to fetch.
   */
  orderBy?: Prisma.TranscriptSessionOrderByWithRelationInput | Prisma.TranscriptSessionOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for TranscriptSessions.
   */
  cursor?: Prisma.TranscriptSessionWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` TranscriptSessions from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` TranscriptSessions.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of TranscriptSessions.
   */
  distinct?: Prisma.TranscriptSessionScalarFieldEnum | Prisma.TranscriptSessionScalarFieldEnum[]
}

/**
 * TranscriptSession findMany
 */
export type TranscriptSessionFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TranscriptSession
   */
  select?: Prisma.TranscriptSessionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the TranscriptSession
   */
  omit?: Prisma.TranscriptSessionOmit<ExtArgs> | null
  /**
   * Filter, which TranscriptSessions to fetch.
   */
  where?: Prisma.TranscriptSessionWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of TranscriptSessions to fetch.
   */
  orderBy?: Prisma.TranscriptSessionOrderByWithRelationInput | Prisma.TranscriptSessionOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing TranscriptSessions.
   */
  cursor?: Prisma.TranscriptSessionWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` TranscriptSessions from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` TranscriptSessions.
   */
  skip?: number
  distinct?: Prisma.TranscriptSessionScalarFieldEnum | Prisma.TranscriptSessionScalarFieldEnum[]
}

/**
 * TranscriptSession create
 */
export type TranscriptSessionCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TranscriptSession
   */
  select?: Prisma.TranscriptSessionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the TranscriptSession
   */
  omit?: Prisma.TranscriptSessionOmit<ExtArgs> | null
  /**
   * The data needed to create a TranscriptSession.
   */
  data: Prisma.XOR<Prisma.TranscriptSessionCreateInput, Prisma.TranscriptSessionUncheckedCreateInput>
}

/**
 * TranscriptSession createMany
 */
export type TranscriptSessionCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many TranscriptSessions.
   */
  data: Prisma.TranscriptSessionCreateManyInput | Prisma.TranscriptSessionCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * TranscriptSession createManyAndReturn
 */
export type TranscriptSessionCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TranscriptSession
   */
  select?: Prisma.TranscriptSessionSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the TranscriptSession
   */
  omit?: Prisma.TranscriptSessionOmit<ExtArgs> | null
  /**
   * The data used to create many TranscriptSessions.
   */
  data: Prisma.TranscriptSessionCreateManyInput | Prisma.TranscriptSessionCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * TranscriptSession update
 */
export type TranscriptSessionUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TranscriptSession
   */
  select?: Prisma.TranscriptSessionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the TranscriptSession
   */
  omit?: Prisma.TranscriptSessionOmit<ExtArgs> | null
  /**
   * The data needed to update a TranscriptSession.
   */
  data: Prisma.XOR<Prisma.TranscriptSessionUpdateInput, Prisma.TranscriptSessionUncheckedUpdateInput>
  /**
   * Choose, which TranscriptSession to update.
   */
  where: Prisma.TranscriptSessionWhereUniqueInput
}

/**
 * TranscriptSession updateMany
 */
export type TranscriptSessionUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update TranscriptSessions.
   */
  data: Prisma.XOR<Prisma.TranscriptSessionUpdateManyMutationInput, Prisma.TranscriptSessionUncheckedUpdateManyInput>
  /**
   * Filter which TranscriptSessions to update
   */
  where?: Prisma.TranscriptSessionWhereInput
  /**
   * Limit how many TranscriptSessions to update.
   */
  limit?: number
}

/**
 * TranscriptSession updateManyAndReturn
 */
export type TranscriptSessionUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TranscriptSession
   */
  select?: Prisma.TranscriptSessionSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the TranscriptSession
   */
  omit?: Prisma.TranscriptSessionOmit<ExtArgs> | null
  /**
   * The data used to update TranscriptSessions.
   */
  data: Prisma.XOR<Prisma.TranscriptSessionUpdateManyMutationInput, Prisma.TranscriptSessionUncheckedUpdateManyInput>
  /**
   * Filter which TranscriptSessions to update
   */
  where?: Prisma.TranscriptSessionWhereInput
  /**
   * Limit how many TranscriptSessions to update.
   */
  limit?: number
}

/**
 * TranscriptSession upsert
 */
export type TranscriptSessionUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TranscriptSession
   */
  select?: Prisma.TranscriptSessionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the TranscriptSession
   */
  omit?: Prisma.TranscriptSessionOmit<ExtArgs> | null
  /**
   * The filter to search for the TranscriptSession to update in case it exists.
   */
  where: Prisma.TranscriptSessionWhereUniqueInput
  /**
   * In case the TranscriptSession found by the `where` argument doesn't exist, create a new TranscriptSession with this data.
   */
  create: Prisma.XOR<Prisma.TranscriptSessionCreateInput, Prisma.TranscriptSessionUncheckedCreateInput>
  /**
   * In case the TranscriptSession was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.TranscriptSessionUpdateInput, Prisma.TranscriptSessionUncheckedUpdateInput>
}

/**
 * TranscriptSession delete
 */
export type TranscriptSessionDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TranscriptSession
   */
  select?: Prisma.TranscriptSessionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the TranscriptSession
   */
  omit?: Prisma.TranscriptSessionOmit<ExtArgs> | null
  /**
   * Filter which TranscriptSession to delete.
   */
  where: Prisma.TranscriptSessionWhereUniqueInput
}

/**
 * TranscriptSession deleteMany
 */
export type TranscriptSessionDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which TranscriptSessions to delete
   */
  where?: Prisma.TranscriptSessionWhereInput
  /**
   * Limit how many TranscriptSessions to delete.
   */
  limit?: number
}

/**
 * TranscriptSession without action
 */
export type TranscriptSessionDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TranscriptSession
   */
  select?: Prisma.TranscriptSessionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the TranscriptSession
   */
  omit?: Prisma.TranscriptSessionOmit<ExtArgs> | null
}
