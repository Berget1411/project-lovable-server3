
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/**
 * This file exports the `ConvAIAgent` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model ConvAIAgent
 * Stores created ElevenLabs Conversational AI agents for auditing/ownership
 */
export type ConvAIAgentModel = runtime.Types.Result.DefaultSelection<Prisma.$ConvAIAgentPayload>

export type AggregateConvAIAgent = {
  _count: ConvAIAgentCountAggregateOutputType | null
  _min: ConvAIAgentMinAggregateOutputType | null
  _max: ConvAIAgentMaxAggregateOutputType | null
}

export type ConvAIAgentMinAggregateOutputType = {
  id: string | null
  agentId: string | null
  userId: string | null
  name: string | null
  voiceId: string | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type ConvAIAgentMaxAggregateOutputType = {
  id: string | null
  agentId: string | null
  userId: string | null
  name: string | null
  voiceId: string | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type ConvAIAgentCountAggregateOutputType = {
  id: number
  agentId: number
  userId: number
  name: number
  voiceId: number
  config: number
  createdAt: number
  updatedAt: number
  _all: number
}


export type ConvAIAgentMinAggregateInputType = {
  id?: true
  agentId?: true
  userId?: true
  name?: true
  voiceId?: true
  createdAt?: true
  updatedAt?: true
}

export type ConvAIAgentMaxAggregateInputType = {
  id?: true
  agentId?: true
  userId?: true
  name?: true
  voiceId?: true
  createdAt?: true
  updatedAt?: true
}

export type ConvAIAgentCountAggregateInputType = {
  id?: true
  agentId?: true
  userId?: true
  name?: true
  voiceId?: true
  config?: true
  createdAt?: true
  updatedAt?: true
  _all?: true
}

export type ConvAIAgentAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which ConvAIAgent to aggregate.
   */
  where?: Prisma.ConvAIAgentWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of ConvAIAgents to fetch.
   */
  orderBy?: Prisma.ConvAIAgentOrderByWithRelationInput | Prisma.ConvAIAgentOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.ConvAIAgentWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` ConvAIAgents from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` ConvAIAgents.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned ConvAIAgents
  **/
  _count?: true | ConvAIAgentCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: ConvAIAgentMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: ConvAIAgentMaxAggregateInputType
}

export type GetConvAIAgentAggregateType<T extends ConvAIAgentAggregateArgs> = {
      [P in keyof T & keyof AggregateConvAIAgent]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateConvAIAgent[P]>
    : Prisma.GetScalarType<T[P], AggregateConvAIAgent[P]>
}




export type ConvAIAgentGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.ConvAIAgentWhereInput
  orderBy?: Prisma.ConvAIAgentOrderByWithAggregationInput | Prisma.ConvAIAgentOrderByWithAggregationInput[]
  by: Prisma.ConvAIAgentScalarFieldEnum[] | Prisma.ConvAIAgentScalarFieldEnum
  having?: Prisma.ConvAIAgentScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: ConvAIAgentCountAggregateInputType | true
  _min?: ConvAIAgentMinAggregateInputType
  _max?: ConvAIAgentMaxAggregateInputType
}

export type ConvAIAgentGroupByOutputType = {
  id: string
  agentId: string
  userId: string | null
  name: string | null
  voiceId: string | null
  config: runtime.JsonValue | null
  createdAt: Date
  updatedAt: Date
  _count: ConvAIAgentCountAggregateOutputType | null
  _min: ConvAIAgentMinAggregateOutputType | null
  _max: ConvAIAgentMaxAggregateOutputType | null
}

type GetConvAIAgentGroupByPayload<T extends ConvAIAgentGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<ConvAIAgentGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof ConvAIAgentGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], ConvAIAgentGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], ConvAIAgentGroupByOutputType[P]>
      }
    >
  >



export type ConvAIAgentWhereInput = {
  AND?: Prisma.ConvAIAgentWhereInput | Prisma.ConvAIAgentWhereInput[]
  OR?: Prisma.ConvAIAgentWhereInput[]
  NOT?: Prisma.ConvAIAgentWhereInput | Prisma.ConvAIAgentWhereInput[]
  id?: Prisma.StringFilter<"ConvAIAgent"> | string
  agentId?: Prisma.StringFilter<"ConvAIAgent"> | string
  userId?: Prisma.StringNullableFilter<"ConvAIAgent"> | string | null
  name?: Prisma.StringNullableFilter<"ConvAIAgent"> | string | null
  voiceId?: Prisma.StringNullableFilter<"ConvAIAgent"> | string | null
  config?: Prisma.JsonNullableFilter<"ConvAIAgent">
  createdAt?: Prisma.DateTimeFilter<"ConvAIAgent"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"ConvAIAgent"> | Date | string
}

export type ConvAIAgentOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  agentId?: Prisma.SortOrder
  userId?: Prisma.SortOrderInput | Prisma.SortOrder
  name?: Prisma.SortOrderInput | Prisma.SortOrder
  voiceId?: Prisma.SortOrderInput | Prisma.SortOrder
  config?: Prisma.SortOrderInput | Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type ConvAIAgentWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  agentId?: string
  AND?: Prisma.ConvAIAgentWhereInput | Prisma.ConvAIAgentWhereInput[]
  OR?: Prisma.ConvAIAgentWhereInput[]
  NOT?: Prisma.ConvAIAgentWhereInput | Prisma.ConvAIAgentWhereInput[]
  userId?: Prisma.StringNullableFilter<"ConvAIAgent"> | string | null
  name?: Prisma.StringNullableFilter<"ConvAIAgent"> | string | null
  voiceId?: Prisma.StringNullableFilter<"ConvAIAgent"> | string | null
  config?: Prisma.JsonNullableFilter<"ConvAIAgent">
  createdAt?: Prisma.DateTimeFilter<"ConvAIAgent"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"ConvAIAgent"> | Date | string
}, "id" | "agentId">

export type ConvAIAgentOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  agentId?: Prisma.SortOrder
  userId?: Prisma.SortOrderInput | Prisma.SortOrder
  name?: Prisma.SortOrderInput | Prisma.SortOrder
  voiceId?: Prisma.SortOrderInput | Prisma.SortOrder
  config?: Prisma.SortOrderInput | Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  _count?: Prisma.ConvAIAgentCountOrderByAggregateInput
  _max?: Prisma.ConvAIAgentMaxOrderByAggregateInput
  _min?: Prisma.ConvAIAgentMinOrderByAggregateInput
}

export type ConvAIAgentScalarWhereWithAggregatesInput = {
  AND?: Prisma.ConvAIAgentScalarWhereWithAggregatesInput | Prisma.ConvAIAgentScalarWhereWithAggregatesInput[]
  OR?: Prisma.ConvAIAgentScalarWhereWithAggregatesInput[]
  NOT?: Prisma.ConvAIAgentScalarWhereWithAggregatesInput | Prisma.ConvAIAgentScalarWhereWithAggregatesInput[]
  id?: Prisma.StringWithAggregatesFilter<"ConvAIAgent"> | string
  agentId?: Prisma.StringWithAggregatesFilter<"ConvAIAgent"> | string
  userId?: Prisma.StringNullableWithAggregatesFilter<"ConvAIAgent"> | string | null
  name?: Prisma.StringNullableWithAggregatesFilter<"ConvAIAgent"> | string | null
  voiceId?: Prisma.StringNullableWithAggregatesFilter<"ConvAIAgent"> | string | null
  config?: Prisma.JsonNullableWithAggregatesFilter<"ConvAIAgent">
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"ConvAIAgent"> | Date | string
  updatedAt?: Prisma.DateTimeWithAggregatesFilter<"ConvAIAgent"> | Date | string
}

export type ConvAIAgentCreateInput = {
  id?: string
  agentId: string
  userId?: string | null
  name?: string | null
  voiceId?: string | null
  config?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type ConvAIAgentUncheckedCreateInput = {
  id?: string
  agentId: string
  userId?: string | null
  name?: string | null
  voiceId?: string | null
  config?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type ConvAIAgentUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  agentId?: Prisma.StringFieldUpdateOperationsInput | string
  userId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  name?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  voiceId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  config?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type ConvAIAgentUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  agentId?: Prisma.StringFieldUpdateOperationsInput | string
  userId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  name?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  voiceId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  config?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type ConvAIAgentCreateManyInput = {
  id?: string
  agentId: string
  userId?: string | null
  name?: string | null
  voiceId?: string | null
  config?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type ConvAIAgentUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  agentId?: Prisma.StringFieldUpdateOperationsInput | string
  userId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  name?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  voiceId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  config?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type ConvAIAgentUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  agentId?: Prisma.StringFieldUpdateOperationsInput | string
  userId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  name?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  voiceId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  config?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type ConvAIAgentCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  agentId?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  name?: Prisma.SortOrder
  voiceId?: Prisma.SortOrder
  config?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type ConvAIAgentMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  agentId?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  name?: Prisma.SortOrder
  voiceId?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type ConvAIAgentMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  agentId?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  name?: Prisma.SortOrder
  voiceId?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}



export type ConvAIAgentSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  agentId?: boolean
  userId?: boolean
  name?: boolean
  voiceId?: boolean
  config?: boolean
  createdAt?: boolean
  updatedAt?: boolean
}, ExtArgs["result"]["convAIAgent"]>

export type ConvAIAgentSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  agentId?: boolean
  userId?: boolean
  name?: boolean
  voiceId?: boolean
  config?: boolean
  createdAt?: boolean
  updatedAt?: boolean
}, ExtArgs["result"]["convAIAgent"]>

export type ConvAIAgentSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  agentId?: boolean
  userId?: boolean
  name?: boolean
  voiceId?: boolean
  config?: boolean
  createdAt?: boolean
  updatedAt?: boolean
}, ExtArgs["result"]["convAIAgent"]>

export type ConvAIAgentSelectScalar = {
  id?: boolean
  agentId?: boolean
  userId?: boolean
  name?: boolean
  voiceId?: boolean
  config?: boolean
  createdAt?: boolean
  updatedAt?: boolean
}

export type ConvAIAgentOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "agentId" | "userId" | "name" | "voiceId" | "config" | "createdAt" | "updatedAt", ExtArgs["result"]["convAIAgent"]>

export type $ConvAIAgentPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "ConvAIAgent"
  objects: {}
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: string
    agentId: string
    userId: string | null
    name: string | null
    voiceId: string | null
    config: runtime.JsonValue | null
    createdAt: Date
    updatedAt: Date
  }, ExtArgs["result"]["convAIAgent"]>
  composites: {}
}

export type ConvAIAgentGetPayload<S extends boolean | null | undefined | ConvAIAgentDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$ConvAIAgentPayload, S>

export type ConvAIAgentCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<ConvAIAgentFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: ConvAIAgentCountAggregateInputType | true
  }

export interface ConvAIAgentDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ConvAIAgent'], meta: { name: 'ConvAIAgent' } }
  /**
   * Find zero or one ConvAIAgent that matches the filter.
   * @param {ConvAIAgentFindUniqueArgs} args - Arguments to find a ConvAIAgent
   * @example
   * // Get one ConvAIAgent
   * const convAIAgent = await prisma.convAIAgent.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends ConvAIAgentFindUniqueArgs>(args: Prisma.SelectSubset<T, ConvAIAgentFindUniqueArgs<ExtArgs>>): Prisma.Prisma__ConvAIAgentClient<runtime.Types.Result.GetResult<Prisma.$ConvAIAgentPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one ConvAIAgent that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {ConvAIAgentFindUniqueOrThrowArgs} args - Arguments to find a ConvAIAgent
   * @example
   * // Get one ConvAIAgent
   * const convAIAgent = await prisma.convAIAgent.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends ConvAIAgentFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, ConvAIAgentFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__ConvAIAgentClient<runtime.Types.Result.GetResult<Prisma.$ConvAIAgentPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first ConvAIAgent that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ConvAIAgentFindFirstArgs} args - Arguments to find a ConvAIAgent
   * @example
   * // Get one ConvAIAgent
   * const convAIAgent = await prisma.convAIAgent.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends ConvAIAgentFindFirstArgs>(args?: Prisma.SelectSubset<T, ConvAIAgentFindFirstArgs<ExtArgs>>): Prisma.Prisma__ConvAIAgentClient<runtime.Types.Result.GetResult<Prisma.$ConvAIAgentPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first ConvAIAgent that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ConvAIAgentFindFirstOrThrowArgs} args - Arguments to find a ConvAIAgent
   * @example
   * // Get one ConvAIAgent
   * const convAIAgent = await prisma.convAIAgent.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends ConvAIAgentFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, ConvAIAgentFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__ConvAIAgentClient<runtime.Types.Result.GetResult<Prisma.$ConvAIAgentPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more ConvAIAgents that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ConvAIAgentFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all ConvAIAgents
   * const convAIAgents = await prisma.convAIAgent.findMany()
   * 
   * // Get first 10 ConvAIAgents
   * const convAIAgents = await prisma.convAIAgent.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const convAIAgentWithIdOnly = await prisma.convAIAgent.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends ConvAIAgentFindManyArgs>(args?: Prisma.SelectSubset<T, ConvAIAgentFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ConvAIAgentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a ConvAIAgent.
   * @param {ConvAIAgentCreateArgs} args - Arguments to create a ConvAIAgent.
   * @example
   * // Create one ConvAIAgent
   * const ConvAIAgent = await prisma.convAIAgent.create({
   *   data: {
   *     // ... data to create a ConvAIAgent
   *   }
   * })
   * 
   */
  create<T extends ConvAIAgentCreateArgs>(args: Prisma.SelectSubset<T, ConvAIAgentCreateArgs<ExtArgs>>): Prisma.Prisma__ConvAIAgentClient<runtime.Types.Result.GetResult<Prisma.$ConvAIAgentPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many ConvAIAgents.
   * @param {ConvAIAgentCreateManyArgs} args - Arguments to create many ConvAIAgents.
   * @example
   * // Create many ConvAIAgents
   * const convAIAgent = await prisma.convAIAgent.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends ConvAIAgentCreateManyArgs>(args?: Prisma.SelectSubset<T, ConvAIAgentCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many ConvAIAgents and returns the data saved in the database.
   * @param {ConvAIAgentCreateManyAndReturnArgs} args - Arguments to create many ConvAIAgents.
   * @example
   * // Create many ConvAIAgents
   * const convAIAgent = await prisma.convAIAgent.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many ConvAIAgents and only return the `id`
   * const convAIAgentWithIdOnly = await prisma.convAIAgent.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends ConvAIAgentCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, ConvAIAgentCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ConvAIAgentPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a ConvAIAgent.
   * @param {ConvAIAgentDeleteArgs} args - Arguments to delete one ConvAIAgent.
   * @example
   * // Delete one ConvAIAgent
   * const ConvAIAgent = await prisma.convAIAgent.delete({
   *   where: {
   *     // ... filter to delete one ConvAIAgent
   *   }
   * })
   * 
   */
  delete<T extends ConvAIAgentDeleteArgs>(args: Prisma.SelectSubset<T, ConvAIAgentDeleteArgs<ExtArgs>>): Prisma.Prisma__ConvAIAgentClient<runtime.Types.Result.GetResult<Prisma.$ConvAIAgentPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one ConvAIAgent.
   * @param {ConvAIAgentUpdateArgs} args - Arguments to update one ConvAIAgent.
   * @example
   * // Update one ConvAIAgent
   * const convAIAgent = await prisma.convAIAgent.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends ConvAIAgentUpdateArgs>(args: Prisma.SelectSubset<T, ConvAIAgentUpdateArgs<ExtArgs>>): Prisma.Prisma__ConvAIAgentClient<runtime.Types.Result.GetResult<Prisma.$ConvAIAgentPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more ConvAIAgents.
   * @param {ConvAIAgentDeleteManyArgs} args - Arguments to filter ConvAIAgents to delete.
   * @example
   * // Delete a few ConvAIAgents
   * const { count } = await prisma.convAIAgent.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends ConvAIAgentDeleteManyArgs>(args?: Prisma.SelectSubset<T, ConvAIAgentDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more ConvAIAgents.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ConvAIAgentUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many ConvAIAgents
   * const convAIAgent = await prisma.convAIAgent.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends ConvAIAgentUpdateManyArgs>(args: Prisma.SelectSubset<T, ConvAIAgentUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more ConvAIAgents and returns the data updated in the database.
   * @param {ConvAIAgentUpdateManyAndReturnArgs} args - Arguments to update many ConvAIAgents.
   * @example
   * // Update many ConvAIAgents
   * const convAIAgent = await prisma.convAIAgent.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more ConvAIAgents and only return the `id`
   * const convAIAgentWithIdOnly = await prisma.convAIAgent.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends ConvAIAgentUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, ConvAIAgentUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ConvAIAgentPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one ConvAIAgent.
   * @param {ConvAIAgentUpsertArgs} args - Arguments to update or create a ConvAIAgent.
   * @example
   * // Update or create a ConvAIAgent
   * const convAIAgent = await prisma.convAIAgent.upsert({
   *   create: {
   *     // ... data to create a ConvAIAgent
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the ConvAIAgent we want to update
   *   }
   * })
   */
  upsert<T extends ConvAIAgentUpsertArgs>(args: Prisma.SelectSubset<T, ConvAIAgentUpsertArgs<ExtArgs>>): Prisma.Prisma__ConvAIAgentClient<runtime.Types.Result.GetResult<Prisma.$ConvAIAgentPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of ConvAIAgents.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ConvAIAgentCountArgs} args - Arguments to filter ConvAIAgents to count.
   * @example
   * // Count the number of ConvAIAgents
   * const count = await prisma.convAIAgent.count({
   *   where: {
   *     // ... the filter for the ConvAIAgents we want to count
   *   }
   * })
  **/
  count<T extends ConvAIAgentCountArgs>(
    args?: Prisma.Subset<T, ConvAIAgentCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], ConvAIAgentCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a ConvAIAgent.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ConvAIAgentAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends ConvAIAgentAggregateArgs>(args: Prisma.Subset<T, ConvAIAgentAggregateArgs>): Prisma.PrismaPromise<GetConvAIAgentAggregateType<T>>

  /**
   * Group by ConvAIAgent.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ConvAIAgentGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends ConvAIAgentGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: ConvAIAgentGroupByArgs['orderBy'] }
      : { orderBy?: ConvAIAgentGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, ConvAIAgentGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetConvAIAgentGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the ConvAIAgent model
 */
readonly fields: ConvAIAgentFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for ConvAIAgent.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__ConvAIAgentClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the ConvAIAgent model
 */
export interface ConvAIAgentFieldRefs {
  readonly id: Prisma.FieldRef<"ConvAIAgent", 'String'>
  readonly agentId: Prisma.FieldRef<"ConvAIAgent", 'String'>
  readonly userId: Prisma.FieldRef<"ConvAIAgent", 'String'>
  readonly name: Prisma.FieldRef<"ConvAIAgent", 'String'>
  readonly voiceId: Prisma.FieldRef<"ConvAIAgent", 'String'>
  readonly config: Prisma.FieldRef<"ConvAIAgent", 'Json'>
  readonly createdAt: Prisma.FieldRef<"ConvAIAgent", 'DateTime'>
  readonly updatedAt: Prisma.FieldRef<"ConvAIAgent", 'DateTime'>
}
    

// Custom InputTypes
/**
 * ConvAIAgent findUnique
 */
export type ConvAIAgentFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ConvAIAgent
   */
  select?: Prisma.ConvAIAgentSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ConvAIAgent
   */
  omit?: Prisma.ConvAIAgentOmit<ExtArgs> | null
  /**
   * Filter, which ConvAIAgent to fetch.
   */
  where: Prisma.ConvAIAgentWhereUniqueInput
}

/**
 * ConvAIAgent findUniqueOrThrow
 */
export type ConvAIAgentFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ConvAIAgent
   */
  select?: Prisma.ConvAIAgentSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ConvAIAgent
   */
  omit?: Prisma.ConvAIAgentOmit<ExtArgs> | null
  /**
   * Filter, which ConvAIAgent to fetch.
   */
  where: Prisma.ConvAIAgentWhereUniqueInput
}

/**
 * ConvAIAgent findFirst
 */
export type ConvAIAgentFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ConvAIAgent
   */
  select?: Prisma.ConvAIAgentSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ConvAIAgent
   */
  omit?: Prisma.ConvAIAgentOmit<ExtArgs> | null
  /**
   * Filter, which ConvAIAgent to fetch.
   */
  where?: Prisma.ConvAIAgentWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of ConvAIAgents to fetch.
   */
  orderBy?: Prisma.ConvAIAgentOrderByWithRelationInput | Prisma.ConvAIAgentOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for ConvAIAgents.
   */
  cursor?: Prisma.ConvAIAgentWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` ConvAIAgents from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` ConvAIAgents.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of ConvAIAgents.
   */
  distinct?: Prisma.ConvAIAgentScalarFieldEnum | Prisma.ConvAIAgentScalarFieldEnum[]
}

/**
 * ConvAIAgent findFirstOrThrow
 */
export type ConvAIAgentFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ConvAIAgent
   */
  select?: Prisma.ConvAIAgentSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ConvAIAgent
   */
  omit?: Prisma.ConvAIAgentOmit<ExtArgs> | null
  /**
   * Filter, which ConvAIAgent to fetch.
   */
  where?: Prisma.ConvAIAgentWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of ConvAIAgents to fetch.
   */
  orderBy?: Prisma.ConvAIAgentOrderByWithRelationInput | Prisma.ConvAIAgentOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for ConvAIAgents.
   */
  cursor?: Prisma.ConvAIAgentWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` ConvAIAgents from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` ConvAIAgents.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of ConvAIAgents.
   */
  distinct?: Prisma.ConvAIAgentScalarFieldEnum | Prisma.ConvAIAgentScalarFieldEnum[]
}

/**
 * ConvAIAgent findMany
 */
export type ConvAIAgentFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ConvAIAgent
   */
  select?: Prisma.ConvAIAgentSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ConvAIAgent
   */
  omit?: Prisma.ConvAIAgentOmit<ExtArgs> | null
  /**
   * Filter, which ConvAIAgents to fetch.
   */
  where?: Prisma.ConvAIAgentWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of ConvAIAgents to fetch.
   */
  orderBy?: Prisma.ConvAIAgentOrderByWithRelationInput | Prisma.ConvAIAgentOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing ConvAIAgents.
   */
  cursor?: Prisma.ConvAIAgentWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` ConvAIAgents from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` ConvAIAgents.
   */
  skip?: number
  distinct?: Prisma.ConvAIAgentScalarFieldEnum | Prisma.ConvAIAgentScalarFieldEnum[]
}

/**
 * ConvAIAgent create
 */
export type ConvAIAgentCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ConvAIAgent
   */
  select?: Prisma.ConvAIAgentSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ConvAIAgent
   */
  omit?: Prisma.ConvAIAgentOmit<ExtArgs> | null
  /**
   * The data needed to create a ConvAIAgent.
   */
  data: Prisma.XOR<Prisma.ConvAIAgentCreateInput, Prisma.ConvAIAgentUncheckedCreateInput>
}

/**
 * ConvAIAgent createMany
 */
export type ConvAIAgentCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many ConvAIAgents.
   */
  data: Prisma.ConvAIAgentCreateManyInput | Prisma.ConvAIAgentCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * ConvAIAgent createManyAndReturn
 */
export type ConvAIAgentCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ConvAIAgent
   */
  select?: Prisma.ConvAIAgentSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the ConvAIAgent
   */
  omit?: Prisma.ConvAIAgentOmit<ExtArgs> | null
  /**
   * The data used to create many ConvAIAgents.
   */
  data: Prisma.ConvAIAgentCreateManyInput | Prisma.ConvAIAgentCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * ConvAIAgent update
 */
export type ConvAIAgentUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ConvAIAgent
   */
  select?: Prisma.ConvAIAgentSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ConvAIAgent
   */
  omit?: Prisma.ConvAIAgentOmit<ExtArgs> | null
  /**
   * The data needed to update a ConvAIAgent.
   */
  data: Prisma.XOR<Prisma.ConvAIAgentUpdateInput, Prisma.ConvAIAgentUncheckedUpdateInput>
  /**
   * Choose, which ConvAIAgent to update.
   */
  where: Prisma.ConvAIAgentWhereUniqueInput
}

/**
 * ConvAIAgent updateMany
 */
export type ConvAIAgentUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update ConvAIAgents.
   */
  data: Prisma.XOR<Prisma.ConvAIAgentUpdateManyMutationInput, Prisma.ConvAIAgentUncheckedUpdateManyInput>
  /**
   * Filter which ConvAIAgents to update
   */
  where?: Prisma.ConvAIAgentWhereInput
  /**
   * Limit how many ConvAIAgents to update.
   */
  limit?: number
}

/**
 * ConvAIAgent updateManyAndReturn
 */
export type ConvAIAgentUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ConvAIAgent
   */
  select?: Prisma.ConvAIAgentSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the ConvAIAgent
   */
  omit?: Prisma.ConvAIAgentOmit<ExtArgs> | null
  /**
   * The data used to update ConvAIAgents.
   */
  data: Prisma.XOR<Prisma.ConvAIAgentUpdateManyMutationInput, Prisma.ConvAIAgentUncheckedUpdateManyInput>
  /**
   * Filter which ConvAIAgents to update
   */
  where?: Prisma.ConvAIAgentWhereInput
  /**
   * Limit how many ConvAIAgents to update.
   */
  limit?: number
}

/**
 * ConvAIAgent upsert
 */
export type ConvAIAgentUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ConvAIAgent
   */
  select?: Prisma.ConvAIAgentSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ConvAIAgent
   */
  omit?: Prisma.ConvAIAgentOmit<ExtArgs> | null
  /**
   * The filter to search for the ConvAIAgent to update in case it exists.
   */
  where: Prisma.ConvAIAgentWhereUniqueInput
  /**
   * In case the ConvAIAgent found by the `where` argument doesn't exist, create a new ConvAIAgent with this data.
   */
  create: Prisma.XOR<Prisma.ConvAIAgentCreateInput, Prisma.ConvAIAgentUncheckedCreateInput>
  /**
   * In case the ConvAIAgent was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.ConvAIAgentUpdateInput, Prisma.ConvAIAgentUncheckedUpdateInput>
}

/**
 * ConvAIAgent delete
 */
export type ConvAIAgentDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ConvAIAgent
   */
  select?: Prisma.ConvAIAgentSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ConvAIAgent
   */
  omit?: Prisma.ConvAIAgentOmit<ExtArgs> | null
  /**
   * Filter which ConvAIAgent to delete.
   */
  where: Prisma.ConvAIAgentWhereUniqueInput
}

/**
 * ConvAIAgent deleteMany
 */
export type ConvAIAgentDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which ConvAIAgents to delete
   */
  where?: Prisma.ConvAIAgentWhereInput
  /**
   * Limit how many ConvAIAgents to delete.
   */
  limit?: number
}

/**
 * ConvAIAgent without action
 */
export type ConvAIAgentDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ConvAIAgent
   */
  select?: Prisma.ConvAIAgentSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ConvAIAgent
   */
  omit?: Prisma.ConvAIAgentOmit<ExtArgs> | null
}
